import { createClient } from "@supabase/supabase-js";
// Placeholder for AI import
// import { GoogleGenerativeAI } from "@google/generative-ai";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_KEY
);

export default async function handler(req, res) {
  const { userId, prompt, previousCode } = req.body;
  if (!userId || !prompt) return res.status(400).json({ error: "Missing fields" });

  try {
    // --- Credits ---
    const cost = previousCode ? 0.25 : 0.5;
    const { data: creditData } = await supabase
      .from("credits")
      .select("*")
      .eq("user_id", userId)
      .single();

    let now = new Date();
    let credits = 5;

    if (creditData) {
      const lastReset = new Date(creditData.last_reset);
      if (now.getUTCDate() !== lastReset.getUTCDate()) {
        credits = 5; // reset daily
      } else {
        credits = creditData.credits;
      }
    }

    if (credits < cost) return res.status(400).json({ error: "Not enough credits" });

    credits -= cost;

    if (creditData) {
      await supabase
        .from("credits")
        .update({ credits, last_reset: now })
        .eq("user_id", userId);
    } else {
      await supabase.from("credits").insert({ user_id: userId, credits, last_reset: now });
    }

    // --- Projects ---
    const { data: projectData } = await supabase
      .from("projects")
      .select("*")
      .eq("user_id", userId);

    let updatedCode = previousCode || "// Full project generated by AI";

    // --- AI placeholder logic ---
    updatedCode += "\n\n// AI update placeholder";

    res.status(200).json({ output: updatedCode, creditsLeft: credits, projects: projectData });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
}
